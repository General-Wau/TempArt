Index: app/src/main/java/com/necromyd/tempart/ArtView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.necromyd.tempart;\r\n\r\nimport static androidx.core.app.ActivityCompat.requestPermissions;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.content.ContentResolver;\r\nimport android.content.ContentValues;\r\nimport android.content.Context;\r\nimport android.content.ContextWrapper;\r\nimport android.content.DialogInterface;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.res.ColorStateList;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.Matrix;\r\nimport android.graphics.Paint;\r\nimport android.graphics.Path;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Environment;\r\nimport android.provider.MediaStore;\r\nimport android.util.AttributeSet;\r\nimport android.util.DisplayMetrics;\r\nimport android.util.Log;\r\nimport android.view.Gravity;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.Nullable;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport com.google.android.material.snackbar.Snackbar;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.OutputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.Objects;\r\n\r\npublic class ArtView extends View {\r\n\r\n    public static final float TOUCH_TOLERANCE = 5;\r\n    private Bitmap bitmap, loadedBitmap;\r\n    private Path mPath;\r\n    private static int layer;\r\n    private float mX, mY;\r\n    public boolean imageSaved;\r\n    private Paint paintLine, tPaintline;\r\n    private static ArrayList<Brush> path;\r\n    private static ArrayList<Brush> layer1;\r\n    private static ArrayList<Brush> layer2;\r\n    private static ArrayList<Brush> layer3;\r\n    private ArrayList<Brush> undo;\r\n    private boolean eraseMode = false;\r\n    private int lastPaintColor;\r\n    public static String pathString;\r\n    private Context context;\r\n    public int alphaSetting = 100;\r\n\r\n    public ArtView(Context context, @Nullable AttributeSet attrs) {\r\n        super(context, attrs);\r\n        this.context = context;\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.O)\r\n    public void init(DisplayMetrics metrics, Bitmap bitmap) {\r\n        layer = 1;\r\n        layer1 = new ArrayList<>();\r\n        layer2 = new ArrayList<>();\r\n        layer3 = new ArrayList<>();\r\n        path = layer1;\r\n        undo = new ArrayList<>();\r\n\r\n        int height = metrics.heightPixels;\r\n        int width = metrics.widthPixels;\r\n\r\n\r\n        if (bitmap != null) {\r\n            loadedBitmap = scale(bitmap, width, height);\r\n        } else {\r\n            this.bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888, true);\r\n        }\r\n        tPaintline = new Paint();\r\n        tPaintline.setColor(Color.TRANSPARENT);\r\n        paintLine = new Paint();\r\n        paintLine.setAntiAlias(true);\r\n        paintLine.setDither(true);\r\n        paintLine.setStrokeJoin(Paint.Join.ROUND);\r\n        paintLine.setStyle(Paint.Style.STROKE);\r\n        paintLine.setColor(Color.BLACK);\r\n        paintLine.setStrokeWidth(1);\r\n        paintLine.setStrokeCap(Paint.Cap.ROUND);\r\n        paintLine.setXfermode(null);\r\n        paintLine.setAlpha(255);\r\n    }\r\n\r\n    @Override\r\n    protected void onDraw(Canvas canvas) {\r\n        canvas.save();\r\n        if (loadedBitmap != null) {\r\n            canvas.drawBitmap(loadedBitmap, 0, 0, paintLine);\r\n            canvas.clipRect(0, 0, loadedBitmap.getWidth(), loadedBitmap.getHeight());\r\n        } else {\r\n            canvas.drawBitmap(bitmap, 0, 0, tPaintline);\r\n        }\r\n\r\n\r\n        for (Brush brush : layer1) {\r\n            paintLine.setColor(brush.color);\r\n            paintLine.setStrokeWidth(brush.strokeWidth);\r\n            paintLine.setMaskFilter(null);\r\n            canvas.drawPath(brush.path, paintLine);\r\n        }\r\n        for (Brush brush : layer2) {\r\n            paintLine.setColor(brush.color);\r\n            paintLine.setStrokeWidth(brush.strokeWidth);\r\n            paintLine.setMaskFilter(null);\r\n            canvas.drawPath(brush.path, paintLine);\r\n        }\r\n        for (Brush brush : layer3) {\r\n            paintLine.setColor(brush.color);\r\n            paintLine.setStrokeWidth(brush.strokeWidth);\r\n            paintLine.setMaskFilter(null);\r\n            canvas.drawPath(brush.path, paintLine);\r\n        }\r\n\r\n        canvas.restore();\r\n    }\r\n\r\n//    public void erase(boolean eraseMode) {\r\n//        if(eraseMode){\r\n//            paintLine.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));\r\n//            paintLine.setColor(Color.TRANSPARENT);\r\n//        }else {\r\n//            paintLine.setXfermode(null);\r\n//            paintLine.setColor(lastPaintColor);\r\n//        }\r\n//    }\r\n\r\n    @Override\r\n    public boolean onTouchEvent(MotionEvent event) {\r\n        float x = event.getX();\r\n        float y = event.getY();\r\n\r\n        switch (event.getAction()) {\r\n            case MotionEvent.ACTION_DOWN:\r\n                touchStart(x, y);\r\n                invalidate();\r\n                break;\r\n            case MotionEvent.ACTION_UP:\r\n                touchUp();\r\n                invalidate();\r\n                break;\r\n            case MotionEvent.ACTION_MOVE:\r\n                touchMove(x, y);\r\n                invalidate();\r\n                break;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void touchUp() {\r\n        mPath.lineTo(mX, mY);\r\n    }\r\n\r\n    private void touchMove(float x, float y) {\r\n        float dx = Math.abs(x - mX);\r\n        float dy = Math.abs(y - mY);\r\n\r\n        if (dx >= TOUCH_TOLERANCE || dy >= TOUCH_TOLERANCE) {\r\n            mPath.quadTo(mX, mY, (x + mX) / 2, (y + mY) / 2);\r\n            mX = x;\r\n            mY = y;\r\n        }\r\n    }\r\n\r\n    private void touchStart(float x, float y) {\r\n        imageSaved = false;\r\n        mPath = new Path();\r\n        Brush draw = new Brush(getDrawingColor(), (int) getLineWidth(), mPath);\r\n        path.add(draw);\r\n        mPath.reset();\r\n        mPath.moveTo(x, y);\r\n        mX = x;\r\n        mY = y;\r\n    }\r\n\r\n    public void setLineWidth(int width, int alpha) {\r\n//        erase(false);\r\n        paintLine.setStrokeWidth(width);\r\n        paintLine.setAlpha(alpha);\r\n        alphaSetting = alpha;\r\n    }\r\n\r\n    public ArrayList<Brush> getPath() {\r\n        return path;\r\n    }\r\n\r\n    public void setDrawingColor(int color) {\r\n        paintLine.setColor(color);\r\n        ArtActivity.fab.setBackgroundTintList(ColorStateList.valueOf(color));\r\n        ArtActivity.initialColor = color;\r\n        lastPaintColor = color;\r\n        ArtActivity.colorArrayList.remove(0);\r\n        ArtActivity.colorArrayList.add(color);\r\n    }\r\n\r\n    //    public void dropSelectColor(View v) {\r\n////        this.setDrawingCacheEnabled(true);\r\n//        v.setOnTouchListener(new OnTouchListener() {\r\n//            @Override\r\n//            public boolean onTouch(View v, MotionEvent event) {\r\n////                Bitmap bitmapTemp = getDrawingCache(true);\r\n//                int color = bitmap.getPixel((int) v.getX(), (int) v.getY());\r\n//                Toast.makeText(getContext(), \"Color : \" + color, Toast.LENGTH_SHORT).show();\r\n//                setDrawingColor(color);\r\n//                v.setOnTouchListener(null);\r\n//                return true;\r\n//            }\r\n//        });\r\n//    }\r\n    public void clear() {\r\n        AlertDialog.Builder clearConfirm = new AlertDialog.Builder(getContext());\r\n        clearConfirm.setCancelable(false);\r\n        clearConfirm.setTitle(\"Save the image and clear everything ?\");\r\n        clearConfirm.setPositiveButton(\"Save and Clear\", new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                try {\r\n                    saveImage();\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                layer1.clear();\r\n                layer2.clear();\r\n                layer3.clear();\r\n                invalidate();\r\n            }\r\n        });\r\n        clearConfirm.setNeutralButton(\"Just clear\", new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                //clear code here\r\n                layer1.clear();\r\n                layer2.clear();\r\n                layer3.clear();\r\n                invalidate();\r\n            }\r\n        });\r\n        clearConfirm.setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n        AlertDialog dialog = clearConfirm.create();\r\n        dialog.show();\r\n    }\r\n\r\n    public void changeLayer() {\r\n\r\n        if (layer == 1) {\r\n            layer++;\r\n            path = layer2;\r\n            ArtActivity.btn_layers.setImageResource(R.drawable.ic_baseline_layer2);\r\n        } else if (layer == 2) {\r\n            layer++;\r\n            path = layer3;\r\n            ArtActivity.btn_layers.setImageResource(R.drawable.ic_baseline_layer3);\r\n        } else if (layer == 3) {\r\n            layer = 1;\r\n            path = layer1;\r\n            ArtActivity.btn_layers.setImageResource(R.drawable.ic_baseline_layer1);\r\n        }\r\n    }\r\n\r\n    public int getLineWidth() {\r\n        return (int) paintLine.getStrokeWidth();\r\n    }\r\n\r\n    public int getDrawingColor() {\r\n        return paintLine.getColor();\r\n    }\r\n\r\n    public void redo() {\r\n        if (undo.size() > 0) {\r\n            path.add(undo.remove(undo.size() - 1));\r\n            invalidate();\r\n        } else {\r\n            Snackbar.make(this, \"Nothing to redo !\", Snackbar.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n\r\n    public void undo() {\r\n        if (path.size() > 0) {\r\n            undo.add(path.remove(path.size() - 1));\r\n            invalidate();\r\n        } else {\r\n            Snackbar.make(this, \"Nothing to undo in this layer !\", Snackbar.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n\r\n    // This is for api <28, it saves two copies, one in internal private directory and one in the public phone gallery\r\n    @SuppressLint(\"WrongThread\")\r\n    public void saveImage() throws IOException {\r\n        ContextWrapper cw = new ContextWrapper(getContext());\r\n        String filename = \"TempART\" + System.currentTimeMillis();\r\n        File directory = cw.getDir(\"files\", Context.MODE_PRIVATE);\r\n        pathString = cw.getDir(\"files\", Context.MODE_PRIVATE).toString();\r\n        File myPath = new File(directory, filename + \".jpg\");\r\n        FileOutputStream fileOutputStream = null;\r\n        fileOutputStream = new FileOutputStream(myPath);\r\n        Canvas canvas = new Canvas(bitmap);\r\n        draw(canvas);\r\n        bitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n            OutputStream fos;\r\n                ContentResolver resolver = context.getContentResolver();\r\n                ContentValues contentValues = new ContentValues();\r\n                contentValues.put(MediaStore.MediaColumns.DISPLAY_NAME, filename + \".jpg\");\r\n                contentValues.put(MediaStore.MediaColumns.MIME_TYPE, \"image/jpg\");\r\n                contentValues.put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_PICTURES);\r\n                Uri imageUri = resolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues);\r\n                fos = resolver.openOutputStream(Objects.requireNonNull(imageUri));\r\n                draw(canvas);\r\n                bitmap.compress(Bitmap.CompressFormat.PNG, 100, fos);\r\n                Objects.requireNonNull(fos).close();\r\n                Toast message = Toast.makeText(getContext(), \"Image Saved\", Toast.LENGTH_LONG);\r\n                message.setGravity(Gravity.BOTTOM, message.getXOffset() / 2, message.getYOffset() / 2);\r\n                message.show();\r\n//            MediaStore.Images.Media.insertImage(context.getContentResolver(), bitmap, filename, \"made with TempArt\");\r\n                imageSaved = true;\r\n        } else {\r\n            try {\r\n                if(ContextCompat.checkSelfPermission(\r\n                        context, Manifest.permission.WRITE_EXTERNAL_STORAGE) ==\r\n                        PackageManager.PERMISSION_GRANTED){\r\n\r\n                    MediaStore.Images.Media.insertImage(context.getContentResolver(), bitmap, filename, \"made with TempArt\");\r\n                    addImageToGallery(myPath.getPath(), context);\r\n\r\n                    imageSaved = true;\r\n                }else{\r\n                    requestPermissions((Activity) context,\r\n                            new String[] { Manifest.permission.WRITE_EXTERNAL_STORAGE },\r\n                            100);\r\n                }\r\n\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            } finally {\r\n                try {\r\n                    assert fileOutputStream != null;\r\n                    fileOutputStream.flush();\r\n                    fileOutputStream.close();\r\n                    Log.d(\"Image:\", directory.getAbsolutePath());\r\n                    Toast message = Toast.makeText(getContext(), \"Image Saved +\" + directory.getAbsolutePath(), Toast.LENGTH_LONG);\r\n                    message.setGravity(Gravity.BOTTOM, message.getXOffset() / 2, message.getYOffset() / 2);\r\n                    message.show();\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Scale a bitmap preserving the aspect ratio.\r\n    public Bitmap scale(Bitmap bitmap, int maxWidth, int maxHeight) {\r\n        // Determine the constrained dimension, which determines both dimensions.\r\n        int width;\r\n        int height;\r\n        float widthRatio = (float) bitmap.getWidth() / maxWidth;\r\n        float heightRatio = (float) bitmap.getHeight() / maxHeight;\r\n        // Width constrained.\r\n        if (widthRatio >= heightRatio) {\r\n            width = maxWidth;\r\n            height = (int) (((float) width / bitmap.getWidth()) * bitmap.getHeight());\r\n        }\r\n        // Height constrained.\r\n        else {\r\n            height = maxHeight;\r\n            width = (int) (((float) height / bitmap.getHeight()) * bitmap.getWidth());\r\n        }\r\n        Bitmap scaledBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\r\n\r\n        float ratioX = (float) width / bitmap.getWidth();\r\n        float ratioY = (float) height / bitmap.getHeight();\r\n        float middleX = width / 2.0f;\r\n        float middleY = height / 2.0f;\r\n        Matrix scaleMatrix = new Matrix();\r\n        scaleMatrix.setScale(ratioX, ratioY, middleX, middleY);\r\n\r\n        Canvas canvas = new Canvas(scaledBitmap);\r\n        canvas.setMatrix(scaleMatrix);\r\n        canvas.drawBitmap(bitmap, middleX - bitmap.getWidth() / 2, middleY - bitmap.getHeight() / 2, new Paint(Paint.FILTER_BITMAP_FLAG));\r\n        return scaledBitmap;\r\n    }\r\n\r\n    public static void addImageToGallery(final String filePath, final Context context) {\r\n\r\n        ContentValues values = new ContentValues();\r\n\r\n        values.put(MediaStore.Images.Media.DATE_TAKEN, System.currentTimeMillis());\r\n        values.put(MediaStore.Images.Media.MIME_TYPE, \"image/jpeg\");\r\n        values.put(MediaStore.MediaColumns.DATA, filePath);\r\n\r\n        context.getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/necromyd/tempart/ArtView.java b/app/src/main/java/com/necromyd/tempart/ArtView.java
--- a/app/src/main/java/com/necromyd/tempart/ArtView.java	
+++ b/app/src/main/java/com/necromyd/tempart/ArtView.java	
@@ -38,6 +38,7 @@
 import com.google.android.material.snackbar.Snackbar;
 
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
@@ -83,6 +84,7 @@
 
 
         if (bitmap != null) {
+            
             loadedBitmap = scale(bitmap, width, height);
         } else {
             this.bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888, true);
@@ -315,11 +317,8 @@
         File directory = cw.getDir("files", Context.MODE_PRIVATE);
         pathString = cw.getDir("files", Context.MODE_PRIVATE).toString();
         File myPath = new File(directory, filename + ".jpg");
-        FileOutputStream fileOutputStream = null;
-        fileOutputStream = new FileOutputStream(myPath);
-        Canvas canvas = new Canvas(bitmap);
-        draw(canvas);
-        bitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);
+        FileOutputStream fileOutputStream = new FileOutputStream(myPath);
+
 
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
             OutputStream fos;
@@ -330,13 +329,17 @@
                 contentValues.put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_PICTURES);
                 Uri imageUri = resolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues);
                 fos = resolver.openOutputStream(Objects.requireNonNull(imageUri));
-                draw(canvas);
-                bitmap.compress(Bitmap.CompressFormat.PNG, 100, fos);
+
+                if(loadedBitmap != null) {
+                    loadedBitmap.compress(Bitmap.CompressFormat.JPEG, 100, fos);
+                }else{
+                    bitmap.compress(Bitmap.CompressFormat.JPEG, 100, fos);
+                }
+
                 Objects.requireNonNull(fos).close();
                 Toast message = Toast.makeText(getContext(), "Image Saved", Toast.LENGTH_LONG);
                 message.setGravity(Gravity.BOTTOM, message.getXOffset() / 2, message.getYOffset() / 2);
                 message.show();
-//            MediaStore.Images.Media.insertImage(context.getContentResolver(), bitmap, filename, "made with TempArt");
                 imageSaved = true;
         } else {
             try {
@@ -344,7 +347,14 @@
                         context, Manifest.permission.WRITE_EXTERNAL_STORAGE) ==
                         PackageManager.PERMISSION_GRANTED){
 
-                    MediaStore.Images.Media.insertImage(context.getContentResolver(), bitmap, filename, "made with TempArt");
+                    if(loadedBitmap != null){
+                        loadedBitmap.compress(Bitmap.CompressFormat.JPEG, 100, fileOutputStream);
+                        MediaStore.Images.Media.insertImage(context.getContentResolver(), loadedBitmap, filename, "made with TempArt");
+                    }else{
+                        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, fileOutputStream);
+                        MediaStore.Images.Media.insertImage(context.getContentResolver(), bitmap, filename, "made with TempArt");
+                    }
+
                     addImageToGallery(myPath.getPath(), context);
 
                     imageSaved = true;
@@ -358,7 +368,6 @@
                 e.printStackTrace();
             } finally {
                 try {
-                    assert fileOutputStream != null;
                     fileOutputStream.flush();
                     fileOutputStream.close();
                     Log.d("Image:", directory.getAbsolutePath());
@@ -414,6 +423,27 @@
 
         context.getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);
     }
+
+
+    private void saveBitmap(Bitmap bm){
+        File file = Environment.getExternalStorageDirectory();
+        File newFile = new File(file, "test.jpg");
+
+        try {
+            FileOutputStream fileOutputStream = new FileOutputStream(newFile);
+            bm.compress(Bitmap.CompressFormat.JPEG, 100, fileOutputStream);
+            fileOutputStream.flush();
+            fileOutputStream.close();
+            Toast.makeText(context,
+                    "Save Bitmap: " + fileOutputStream.toString(),
+                    Toast.LENGTH_LONG).show();
+        } catch (IOException e) {
+            e.printStackTrace();
+            Toast.makeText(context,
+                    "Something wrong: " + e.getMessage(),
+                    Toast.LENGTH_LONG).show();
+        }
+    }
 }
 
 
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\DrDrax\\.android\\avd\\Samsung_API_30.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-09-23T09:08:15.894558700Z\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--- a/.idea/deploymentTargetDropDown.xml	
+++ b/.idea/deploymentTargetDropDown.xml	
@@ -1,17 +1,17 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="deploymentTargetDropDown">
-    <targetSelectedWithDropDown>
+    <runningDeviceTargetSelectedWithDropDown>
       <Target>
-        <type value="QUICK_BOOT_TARGET" />
+        <type value="RUNNING_DEVICE_TARGET" />
         <deviceKey>
           <Key>
             <type value="VIRTUAL_DEVICE_PATH" />
-            <value value="C:\Users\DrDrax\.android\avd\Samsung_API_30.avd" />
+            <value value="C:\Users\DrDrax\.android\avd\Oreo_API_27.avd" />
           </Key>
         </deviceKey>
       </Target>
-    </targetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2021-09-23T09:08:15.894558700Z" />
+    </runningDeviceTargetSelectedWithDropDown>
+    <timeTargetWasSelectedWithDropDown value="2021-10-01T18:39:21.705542600Z" />
   </component>
 </project>
\ No newline at end of file
